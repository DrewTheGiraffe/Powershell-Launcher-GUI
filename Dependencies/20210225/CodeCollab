# update AD Path button
$updateADPath.TabIndex = 0
$updateADPath.Name = "ADPathButton"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Width = 200
$System_Drawing_Size.Height = 23
$updateADPath.Size = $System_Drawing_Size
$updateADPath.UseVisualStyleBackColor = $True
$updateADPath.Text = "AD Path"
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 120
$System_Drawing_Point.Y = 270
$updateADPath.BackColor = "LightGray"
$updateADPath.Location = $System_Drawing_Point
$updateADPath.DataBindings.DefaultDataSourceUpdateMode = 0
$updateADPath.add_Click({
    
    $outputBox.Text = "Preparing Active Directory Path Log..."
    
    Sleep 2
    
    $outputBox.Text = "Set Path is case sensitive and space sensitive
Click File>Save and close Notepad to continue" 

    Sleep 1
    
    Start-Process -Wait -PSPath "C:\Windows\System32\notepad.exe" -ArgumentList "C:\temp\Launcher\Dependencies\Directories\Hostname Path\ActiveDirectoryPath.txt"
    
    Sleep 1
    
    $outputBox.Text = "Reading New Path"
    
    $ADPathContent = Get-Content -LiteralPath "C:\temp\Launcher\Dependencies\Directories\Hostname Path\ActiveDirectoryPath.txt" -Force
    
    Sleep 1
    
    $outputBox.Text = "New Path Saved to Cache!
Don't Forget to click Set Path!"

})
$form1.Controls.Add($updateADPath)



*********************************************************************


# Create Hostname Button
$ButtonStart.Location = New-Object System.Drawing.Point(120, 320)
$ButtonStart.Size = New-Object System.Drawing.Size(200, 23)
$ButtonStart.BackColor = "LightGray"
$ButtonStart.Text = "Create"
$ButtonStart.Add_Click({
    If (Get-Module ActiveDirectory) {
        $outputBox.Text = "Active Directory already loaded on Admin System"
    } 
    else {
        Import-Module ActiveDirectory | Out-Null
    }
    # if hostname check
        If ($objHostnameTextBox1.Text -cne $null) {$ContinueOn=$true;$Computers = $objHostnameTextBox1.Text}
        else {$ContinueOn=$False}
        # if SAN Check
        If ($objSamAccountNameTextBox.Text -cne $null) {$ContinueOn=$true; $SamAccountName = $objSamAccountNameTextBox.Text}
        else {$ContinueOn=$False}
        # if sec group check
        If ($objSecGroupTextBox.Text -cne $null) {$ContinueOn=$true;$CustomSecGroup = $objSecGroupTextBox.Text}
        else {$ContinueOn=$false}
        # if pc description
        If ($objpcdescripTextBox -cne $null){$ContinueOn=$true;$PCDescription=$objpcdescripTextBox.Text}
        else {$ContinueOn=$false}
        If ($ContinueOn -cne $false) {
        ForEach ($Computer in $Computers)
        {
            $ADPathContent = Get-Content -LiteralPath "C:\temp\Launcher\Dependencies\Directories\Hostname Path\ActiveDirectoryPath.txt" -Force
            
            # adds Computer Name to AD @Domain_Name location
            New-ADComputer -Name $Computer -SamAccountName $SamAccountName -Path $ADPathContent -Enabled $true
            
            $outputBox.Text = "Creating Hostname $Computer"
            
            Sleep 3
            
            $User = Get-ADComputer -Identity "CN=$Computer,$ADPathContent" -Server "nasw.ds.army.mil"
            $Group = Get-ADGroup -Identity $CustomSecGroup -Server "nasw.ds.army.mil"

            # adds BLIS FORSCOM WORKSTATION CERTIFICATE REQUEST to selected computer @Name                                                                                                                                      
            Add-ADGroupMember -Identity $Group -Members $User -Server "nasw.ds.army.mil"  
            
            $outputBox.Text = "Added Security Group to Hostname : $Computer"
            
            Sleep 3
            
            # adds Computer Description to AD Obj @nasw.ds.army.mil location
            Set-ADComputer -Identity $User -Description $PCDescription
            $outputBox.Text = "Added Custom Description to Hostname : $Computer"
            
            Sleep 2
        }
          $outputBox.Text = "Finished Creating Hostname : $Computer"
    }
    else { 
        $outputBox.Text = "Absent Data Found"
        
        Sleep 1
        
        $outputBox.Text = "Script Closing Safely"
        
        Sleep 2
        
        $outputBox.Text = "All Modules exited successfully" 
    }

})
$form1.Controls.Add($ButtonStart)
